#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass book
\options openright
\use_default_options false
\master ../tesi.lyx
\maintain_unincluded_children false
\language italian
\language_package default
\inputencoding auto
\fontencoding T1
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize 11
\spacing single
\use_hyperref false
\papersize a4paper
\use_geometry false
\use_package amsmath 2
\use_package amssymb 2
\use_package cancel 1
\use_package esint 1
\use_package mathdots 0
\use_package mathtools 1
\use_package mhchem 0
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\index Indice
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language french
\papercolumns 1
\papersides 2
\paperpagestyle fancy
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
Per la realizzazione di OrbTail ci si é serviti di un metodo di sviluppo
 a fasi.
 La fase preliminare si é concentrata sulla definizione delle tecnologie
 da impiegare per la fase implementativa.
 Un'attenta analisi di quest'ultime é di cruciale importanza al fine di
 minimizzare l'impatto dovuto alla scoperta di limitazioni nelle fasi piú
 avanzate di progetto.
 Una delle prime scelte riguarda la scelta del 
\emph on
controllo di versione
\emph default
, ovvero quel sistema che permette di mantenere traccia di tutte le modifiche
 apportate al progetto, consentire a piú sviluppatori di lavorare indipendenteme
nte senza intralciare il lavoro degli altri ed eventualmente regredire alcune
 funzionalitá del titolo a versioni ritenute piú stabili.
 Sebbene esistano diversi strumenti adatti allo scopo, considerata il numero
 limitato di elementi nel team originale, é stato deciso di sfruttare 
\emph on
git 
\emph default
usando 
\emph on
sourcetree 
\emph default
come client.
 La versione originale del progetto é stata 
\emph on
duplicata 
\emph default
all'interno di una nuova 
\emph on
repository
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
La 
\emph on
repository 
\emph default
é l'archivio online contenente i dati sul progetto e lo storico dei file
 in esso.
\end_layout

\end_inset

 
\emph default
e il suo sviluppo é proseguito per una strada separata, questo perché a
 seguito di questo lavoro di tesi l'intera
\emph on
 codebase 
\emph default
é stata riscritta e la maggior parte dei contributi degli autori originali
 perduti.
\end_layout

\begin_layout Standard
La seconda scelta tecnologica, la piú importante, riguarda la scelta del
 motore grafico da usare.
 Fin dalla prima versione del gioco é stato chiaro che sviluppare senza
 l'ausilio di motori grafici di terze parti avrebbe aumentato esponenzialmente
 il tempo di sviluppo.
 Sebbene oggi esistono molti engine di terze parti in grado di soddisfare
 la stragrande maggioranza delle esigenze degli sviluppatori, durante lo
 sviluppo della versione originale del gioco, le scelte erano ben piú limitate.
 Tra le due tecnologie principali del 2013 vi erano Unity 4.3 e UDK.
 Sebbene quest'ultimo garantiva degli ottimi risultati visivi, lo strumento
 era instabile e particolarmente macchinoso.
 Unity 4.3, d'altro canto, era immediato nell'utilizzo e garantiva un'ottima
 scalabilitá sul gran numero di piattaforme su cui si doveva sviluppare.
 Per la nuova versione é stato deciso di effettuare un porting del gioco
 alla versione Unity 2017.3 al fine di ridurre i tempi di sviluppo.
 Inizialmente era stata anche valutato il motore grafico Unreal Engine 4,
 tuttavia, sebbene la revisione dell'architettura avrebbe comunque richiesto
 la riscrittura di gran parte del codice, la iterazioni del nuovo motore
 sono incredibilmente piú lente rispetto ad Unity e pertanto ne é stata
 abbandonata l'idea.
\end_layout

\begin_layout Standard
Una volta determinate le tecnologie impiegate ci si é concentrati sullo
 sviluppo vero e proprio del gioco, partendo da una fase prototipale, conclusa
 durante il corso per il quale OrbTail era stato sviluppato originariamente,
 e via via procedendo per iterazioni successive in cui sono state implementate
 nuove funzionalitá.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Section
Unity
\end_layout

\begin_layout Standard
Unity
\end_layout

\begin_layout Subsection
Plugin
\end_layout

\begin_layout Standard
iTween
\end_layout

\begin_layout Section
Meccaniche di base
\end_layout

\begin_layout Standard
Livello di prototipo, implementazione delle meccaniche di base
\end_layout

\begin_layout Section
Networking
\end_layout

\begin_layout Section
Arene
\end_layout

\begin_layout Section
Modalitá di gioco
\end_layout

\begin_layout Section
Intelligenza artificiale
\end_layout

\begin_layout Section
Potenziamenti
\end_layout

\begin_layout Section
Splitscreen
\end_layout

\begin_layout Section
Gestione degli input
\end_layout

\begin_layout Section
Menú
\end_layout

\end_body
\end_document
