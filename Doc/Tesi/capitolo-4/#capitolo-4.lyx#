#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass book
\options openright
\use_default_options false
\master ../tesi.lyx
\maintain_unincluded_children false
\language italian
\language_package default
\inputencoding auto
\fontencoding T1
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize 11
\spacing single
\use_hyperref false
\papersize a4paper
\use_geometry false
\use_package amsmath 2
\use_package amssymb 2
\use_package cancel 1
\use_package esint 1
\use_package mathdots 0
\use_package mathtools 1
\use_package mhchem 0
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\index Indice
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language french
\papercolumns 1
\papersides 2
\paperpagestyle fancy
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
Per la realizzazione di OrbTail ci si è serviti di un metodo di sviluppo
 a fasi.
 La fase preliminare si è concentrata sulla definizione delle tecnologie
 impiegate: l'attenta scelta di quest'ultime è di cruciale importanza per
 minimizzare l'impatto sul processo produttivo in caso di criticitá o limitazion
i, specie nelle fasi piú avanzate del progetto.
 Per permettere a piú sviluppatori di lavorare sul progetto in contemporanea,
 mantenere lo storico dei file di progetto e controllare lo sviluppo delle
 varie funzionalitá ci si è affidati a 
\emph on
git
\emph default
, un software per il 
\emph on
controllo di versione 
\emph default
distribuito.
 Per via degli interventi molto estesi che hanno visto la riscrittura quasi
 completa dei contributi originali, la 
\emph on
repository 
\emph default
del gioco risalente al 2013 è stata duplicata e il processo di sviluppo
 descritto in questo lavoro di tesi è proseguito su quest'ultima.
\end_layout

\begin_layout Standard
Un altro aspetto fondamentale riguarda la scelta del 
\emph on
motore grafico
\emph default
.
 Fin dalla versione originale era chiaro che sviluppare senza usare motori
 grafici di terze parti avrebbe aumentato esponenzialmente il tempi di sviluppo,
 rendendo di fatto impossibile supportare tutte le piattaforme desiderate.
 Sebbene oggi vi sia un gran numero di motori grafici gratuiti in grado
 di soddisfare la maggior parte delle esigenze, durante lo sviluppo della
 prima versione di OrbTail le scelte erano ben piú limitate.
 Le due tecnologie principali erano rappresentate da Unity 4.3 e UDK e, sebbene
 quest'ultimo garantiva un'ottima resa visiva, lo strumento risultava instabile,
 poco documentato e particolarmente macchinoso.
 Unity, d'altro canto, è sembrato fin da subito adatto agli scopi del progetto,
 specie per quanto riguarda il supporto dei dispositivi 
\emph on
mobile
\emph default
, ed in generale molto intuitivo.
 Considerando che per questo lavoro di tesi ci si aspettava la riscrittura
 della maggior parte del codice, è stata inoltre avanzata l'ipotesi di un
 cambio motore grafico a favore di Unreal Engine 4.
 Sebbene quest'ultimo avrebbe garantito un'eccellente resa grafica, l'idea
 è stata rapidamente accantonata per via delle iterazioni di sviluppo incredibil
mente piú lente che caratterizzano questo motore grafico, la mancanza di
 servizi di 
\emph on
matchmaking 
\emph default
e, soprattutto, delle criticitá riguardanti lo sviluppo su piattaforme 
\emph on
mobile
\emph default
 (specie in termini di performance ed ottimizzazione).
 Per questa nuova versione del titolo è stato pertanto deciso di aggiornare
 il motore grafico, passando da Unity 4.13 alla versione 2017.3, cercando
 di partire da una base quanto piú stabile possibile e proseguendo per iterazion
i successive.
\end_layout

\begin_layout Section
Unity
\end_layout

\begin_layout Standard
Unity è un motore grafico sviluppato da 
\emph on
Unity Technologies
\emph default
 che consente di sviluppare giochi multipiattaforma su tutte le pattaforme
 
\emph on
mobile
\emph default
, 
\emph on
console 
\emph default
e 
\emph on
desktop
\emph default
.
 La presenza di una versione gratuita unita ad un elevato grado di intuitivitá
 ne ha garantito la rapida affermazione da parte di sviluppatori 
\emph on
indipendenti
\emph default
 e non.
 Questo motore è caratterizzato da paradigmi di sviluppo molto chiari, il
 che lo rende tanto adatto agli sviluppatori alla prime armi quanto ai piú
 esperti.
 Il 
\emph on
pattern architetturale
\emph default
 principale, rappresentato dal
\emph on
l'entity-component
\emph default
, consiste nell'implementare funzionalitá autoconclusive all'interno di
 
\emph on
componenti 
\emph default
indipendenti ed usare i 
\emph on
game object 
\emph default
(termine usato da Unity per descrivere le 
\emph on
entitá
\emph default
)
\emph on
 
\emph default
come aggregatori di quest'ultimi al fine di modellare comportamenti piú
 complessi.
 Questo paradigma è stato migliorato nella versione del motore del 2018,
 introducendo il concetto di 
\emph on
system
\emph default
.
 Secondo questa variante, i componenti espongono solo dei dati e le logiche
 sono implementate all'interno dei sistemi, garantendo un disaccoppiamento
 ancora piú forte tra le varie componenti del gioco.
 Unity consente di implementare le logiche di gioco tramite script 
\emph on
C# 
\emph default
o 
\emph on
Javascript 
\emph default
e 
\emph on
shader 
\emph default
personalizzati tramite il linguaggio CG.
 L'assenza completa di codice nativo, ad eccezione del 
\emph on
core
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Il 
\emph on
core 
\emph default
di un motore grafico è il modulo software di piú basso livello.
 Esso si occupa di astrarre le funzionalitá specifiche di ciascuna piattaforma
 e di dettare il flusso di esecuzione di tutti gli altri sottosistemi, quali
 il renderer, il motore fisico, la logica di gioco e la gestione della memoria.
\end_layout

\end_inset


\emph default
, rende le iterazioni di sviluppo incredibilmente veloci in quanto non esiste
 un processo apposito di compilazione.
\end_layout

\begin_layout Standard
La limitazione maggiore di questo engine risiede nel fatto che il suo 
\emph on
core 
\emph default
è completamente 
\emph on
closed-source 
\emph default
(a meno di non pagare per ottenerne l'accesso) e ció impedisce agli sviluppatori
 di poterne analizzare il flusso di esecuzione, rendendo particolarmente
 difficile il processo di 
\emph on
debugging.
 
\emph default
Questa limitazione è stata mitigata durante il primo trimestre del 2018,
 quando Unity Technologies ne ha reso pubblico il codice sorgente C# su
 
\emph on
bitbucket
\begin_inset CommandInset citation
LatexCommand cite
key "UnityCSharp"

\end_inset

.
 
\emph default
Nonostante il rilascio del codice sia un notevole passo avanti, permane
 ancora l'impossibilitá di modificare il codice del motore per adattarlo
 meglio alle proprie esigenze e ció richiede talvolta l'impiego di soluzioni
 temporanee o alternative.
\end_layout

\begin_layout Standard
Per lo sviluppo di OrbTail sono state usate prevalentemente funzionalitá
 di base legate al 3D, al motore fisico, alla gestione delle scene e delle
 funzionalitá di rete.
 L'uso di funzionalitá generiche ha permesso di evitare tutte le problematiche
 legate ai sistemi piú specifici, quali gestione del 2D e delle 
\emph on
nav mesh 
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Le 
\emph on
nav-mesh 
\emph default
(in italiano 
\begin_inset Quotes fld
\end_inset

mesh di navigazione
\begin_inset Quotes frd
\end_inset

) sono delle superfici poligonali solitamente usate dal sistema di 
\emph on
intelligenza artificiale 
\emph default
per determinare il percorso ottimo (o subottimo) tra due punti nello spazio.
\end_layout

\end_inset

, 
\emph default
le quali si sono talvolta dimostrate inaffidabili, limitate o afflitte da
 bug nascosti.
 L'intero codice sorgente del gioco è stato sviluppato in C#, utilizzando
 il paradigma 
\emph on
entity-component
\emph default
.
 L'integrazione del pattern 
\emph on
entity-component-system 
\emph default
è stata evitata in quanto questi risultava ancora in fase sperimentale e
 per via del fatto che lo sviluppo del gioco era giá in fase avanzata e
 si voleva evitare di correre 
\emph on
rischi
\emph default
 inutili.
 L'architettura di gioco sfrutta inoltre molti oggetti 
\emph on
manager
\emph default
 al fine di scambiare informazioni tra piú livelli e per fornire un unico
 punto d'accesso ai vari sottosistemi.
 Un manager è un'
\emph on
entitá
\emph default
 di gioco che funge da 
\emph on
singleton
\emph default
 accessibile da tutti gli altri sottosistemi al fine di leggerne o modificarne
 lo stato.
 
\end_layout

\begin_layout Standard
L'uso dell'apposito strumento di aggiornamento di versione fornito dal motore
 si è rivelato di notevole importanza, in quanto ha permesso fin da subito
 di ottenere un prodotto stabile a partire dalla versione originale del
 2013.
 Al termine del processo di 
\emph on
porting 
\emph default
automatico, il gioco ha preservato 
\emph on
tutte 
\emph default
le funzionalitá, comprese quelle legate alla rete, al 
\emph on
matchmaking
\emph default
 e al 
\emph on
cross-platform play 
\emph default
manifestando problematiche minori dovuto all'uso di 
\emph on
API 
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Col termine
\emph on
 API, 
\emph default
acronimo di 
\emph on
application programming interface, 
\emph default
ci si riferisce a tutte quelle funzionalitá di un sistema rese disponibili
 agli sviluppatori tramite opportune 
\emph on
procedure
\emph default
.
\end_layout

\end_inset

 
\emph default
obsolete (principalmente in ambito 
\emph on
UI 
\emph default
e di gestione dei livelli).
 Una volta ottenuta una versione stabile, sono state infine aggiornate tutte
 le funzionalitá superate sostituendole con le nuove varianti messe a disposizio
ne del motore.
 Al termine di questa fase ci si è concentrati sull'aggiornamento dell'architett
ura del gioco e sull'implementazione delle nuove funzionalitá.
\end_layout

\begin_layout Subsection
Plug-in
\end_layout

\begin_layout Standard
Unity mette a disposizione un gran quantitativo di 
\emph on
plug-in 
\emph default
esterni al fine di aumentare la resa dei giochi, semplificare il processo
 di sviluppo o aggiungere nuove funzionalitá.
 Per lo sviluppo di OrbTail è stato deciso di utilizzarne uno solo
\emph on
 
\emph default
dal nome 
\emph on
iTween
\begin_inset CommandInset citation
LatexCommand cite
key "iTween"

\end_inset

.
 
\emph default
Questo plug-in gratuito è usato per gestire in maniera semplice ed automatica
 il processo di 
\emph on
tweening
\emph default
, ovvero l'interpolazione automatica di valori in un certo periodo di tempo
 attraverso il sistema di 
\emph on
coroutine 
\emph default
di C#.
 Il plug-in è stato utilizzato principalmente per aggiungere animazioni
 agli elementi dell'interfaccia grafica ed in misura molto minore per gli
 elementi di gioco 3D.
 L'uso di questo sistema ha permesso di risparmiare un notevole quantitativo
 di tempo, garantendo una resa visiva molto buona.
 Quest'ultimo si presenta come un unico file monolitico che puó essere integrato
 nel progetto e non richiede alcuna forma di configurazione.
 Nella fase di 
\emph on
porting 
\emph default
è stato necessario aggiornare il plug-in alla versione piú recente.
\end_layout

\begin_layout Section
Meccaniche di base
\end_layout

\begin_layout Standard
La prima fase dello sviluppo di OrbTail si concentra sulla definizione dell'arch
itettura generale del gioco ed in particolar modo delle meccaniche di base.
 Quest'ultime sono condivise tra tutte le modalitá e livelli e pertanto
 sono state pensate per essere completamente indipendenti da essi.
 Tra le meccaniche di base troviamo la gestione della gravitá, del sistema
 di controllo dei veicoli, della gestione degli scontri e degli oggetti
 collezionabili.
 Tutte le funzionalitá qui descritte sono state sviluppate in una mappa
 di test apposita, con risorse grafiche temporanee e gestione degli input
 molto basilare.
\end_layout

\begin_layout Subsection
Gestione dei livelli
\end_layout

\begin_layout Standard
I livelli offerti dal gioco sono caratterizzati da topologie profondamente
 diverse, il che rende impossibile utilizzare la gravitá automatica fornita
 dal motore fisico di Unity per far fluttuare gli oggetti su di essi.
 Durante la prima iterazione ci si é affidati al sistema di 
\emph on
raycasting 
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Il 
\emph on
raycasting 
\emph default
è una tecnica che consente di determinare le intersezioni tra un raggio
 descritto da un punto inziale ed una direzione ed una o piú superfici poligonal
i.
\end_layout

\end_inset

 
\emph default
al fine di individuare un punto sulla superficie del livello da usare come
 base per il calcolo, tuttavia ci si é presto accorti che il sistema era
 affetto da gravi difetti.
 Sebbene l'uso del 
\emph on
raycast 
\emph default
permette di scrivere un codice di gestione unico che si adatta a tutte le
 topologie, determinare la direzione del raggio usando solo l'orientamento
 dell'oggetto puó generare risultati ambigui o imprevedibili.
 Queste problematiche sono esacerbate da rapidi cambi di direzione a seguito
 di esplosioni o durante il normale 
\emph on
rollio 
\emph default
degli oggetti lungo la superficie del livello.
 Per risolvere questa ambiguitá ci si è affidati ad una descrizione 
\emph on
analitica 
\emph default
della forza di gravitá per ciascuna delle topologie supportate.
 Il 
\emph on
campo gravitazionale
\emph default
 cosí descritto consente di ottenere una direzione non ambigua in cui effettuare
 il 
\emph on
raycasting
\emph default
 per ogni punto dello spazio.
 Una volta individuato il punto sulla superficie, una semplice simulazione
 di un 
\emph on
moto oscillatorio smorzato 
\emph default
permette di modellare lo stazionamento degli oggetti sull'arena.
\end_layout

\begin_layout Standard
La soluzione adottata prevede l'uso di due elementi principali: un componente
 base 
\emph on
GravityField, 
\emph default
da cui derivano le diverse descrizioni dei campi di gravitá supportati,
\emph on
 
\emph default
e il 
\emph on
FloatingObject 
\emph default
che, assegnato agli oggetti di gioco, consente loro di fluttuare sull'arena.
 (Fig.
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:OrbTailGravity"

\end_inset

).
\begin_inset Float figure
placement !h
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename C:/Users/raffa/Documents/Repo/OrbTail/Doc/Tesi/img/dev_gravity.jpg
	lyxscale 20
	height 7cm

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset Argument 1
status open

\begin_layout Plain Layout
Gestione della gravitá.
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "fig:OrbTailGravity"

\end_inset

UML Gestione della gravitá.
\end_layout

\end_inset


\end_layout

\end_inset

 Il primo di questi viene assegnato all'arena e consente di configurare
 sia l'intensitá della gravitá e sia la distanza di stazionamento degli
 oggetti rispetto alla superficie per impedire che questi possano compenetravi.
 Il secondo si occupa di simulare lo stazionamento dell'oggetto a partire
 dalla direzione della forza di gravitá.
\end_layout

\begin_layout Subsection
Sistema di controllo
\end_layout

\begin_layout Standard
Il sistema di controllo di ciascun veicolo si occupa di gestire il movimento
 del veicolo all'interno dell'arena considerando la direzione della forza
 di gravitá e dell'input dell'utente.
\end_layout

\begin_layout Standard
Il componente che si occupa della gestione del movimento, il 
\emph on
MovementController
\emph default
, determina la velocitá lineare e quella angolare del veicolo in ogni istante
 e applica opportune forze al 
\emph on
corpo rigido 
\emph default
di quest'ultimo per causarne il movimento.
 La gestione del movimento non è simulata in maniera fisicamente accurata,
 bensí é affidata ad un semplice controllore 
\emph on
PID.
 
\emph default
Il controllore adoperato consente di controllare la velocitá da applicare
 
\begin_inset Formula $u(t)$
\end_inset

 in funzione di quella attuale del veicolo 
\begin_inset Formula $y(t)$
\end_inset

 e di quella desiderata 
\begin_inset Formula $r(t)$
\end_inset

 usando la sola azione di controllo 
\emph on
proporzionale 
\emph default
con costante 
\begin_inset Formula $K_{p}$
\end_inset

.
 Questo controllore é utilizzato in maniera analoga per gestire l'azione
 di sterzo e la conseguente velocitá angolare risultate.
 Per questa particolare implementazione le azioni 
\emph on
integrali 
\emph default
e 
\emph on
derivative 
\emph default
non sono state ritenute necessarie:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
u(t)=K_{p}(r(t)-y(t))
\]

\end_inset


\end_layout

\begin_layout Standard
La velocitá desiderata del veicolo (ed in maniera analoga l'azione di sterzo)
 
\begin_inset Formula $r(t)$
\end_inset

 sono determinati dal valore massimo di 
\emph on
velocitá
\emph default
 del veicolo 
\begin_inset Formula $r_{max}>0$
\end_inset

 e dall'input dell'utente 
\begin_inset Formula $r_{in}\in[-1;+1]$
\end_inset

.
 Il termine proporzionale 
\begin_inset Formula $K_{e}$
\end_inset

 é invece usato per modellare l'
\emph on
accelerazione
\emph default
 del veicolo.
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
r(t)=r_{max}\cdot r_{in}
\]

\end_inset


\end_layout

\begin_layout Standard
La direzione di accelerazione è ricavata tramite il componente 
\emph on
FloatingObject
\emph default
 in funzione della tangente del campo di gravitá e della rotazione del veicolo,
 questo impedisce a quest'ultimo di percorrere superfici curve passandovici
 attraverso.
\end_layout

\begin_layout Subsection
Sistema di scontro
\end_layout

\begin_layout Standard
FightController.
 Formula usata per il calcolo degli scontri.
\end_layout

\begin_layout Subsection
Gestione dei collezionabili
\end_layout

\begin_layout Standard
OrbController.
\end_layout

\begin_layout Section
Networking
\end_layout

\begin_layout Section
Modalitá di gioco
\end_layout

\begin_layout Standard
Descrizione del flusso di gioco, dello stato della gara e delle condizioni
 di vittoria.
\end_layout

\begin_layout Section
Potenziamenti
\end_layout

\begin_layout Section
Intelligenza artificiale
\end_layout

\begin_layout Section
Splitscreen
\end_layout

\begin_layout Section
Gestione degli input
\end_layout

\begin_layout Section
Menú
\end_layout

\end_body
\end_document
